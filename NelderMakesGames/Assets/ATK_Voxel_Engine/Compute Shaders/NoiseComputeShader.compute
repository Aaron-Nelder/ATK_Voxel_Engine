#pragma kernel CSMain

// Texture dimensions
#define WIDTH 16
#define HEIGHT 16

// Output buffer
RWStructuredBuffer<int> Result;

// Perlin noise parameters
float scale = 20.0;
int offsetX;
int offsetY;
float amplitude = 1.0;
float frequency = 0.1;
int octaves = 8;
float lacunarity = 2.0;
float persistence = 0.5;
int seed;
int maxValue = 255;

// Permutation table for Perlin noise
static const int perm[256] =
{
    151, 160, 137, 91, 90, 15, 131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142,
    8, 99, 37, 240, 21, 10, 23, 190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203,
    117, 35, 11, 32, 57, 177, 33, 88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74,
    165, 71, 134, 139, 48, 27, 166, 77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220,
    105, 92, 41, 55, 46, 245, 40, 244, 102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132,
    187, 208, 89, 18, 169, 200, 196, 135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186,
    3, 64, 52, 217, 226, 250, 124, 123, 5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59,
    227, 47, 16, 58, 17, 182, 189, 28, 42, 223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70,
    221, 153, 101, 155, 167, 43, 172, 9, 129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232,
    178, 185, 112, 104, 218, 246, 97, 228, 251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162,
    241, 81, 51, 145, 235, 249, 14, 239, 107, 49, 192, 214, 31, 181, 199, 106, 157, 184, 84,
    204, 176, 115, 121, 50, 45, 127, 4, 150, 254, 138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243,
    141, 128, 195, 78, 66, 215, 61, 156, 180
};

// Hash function
int hash(int x)
{
    return perm[(x + seed) & 255];
}

// Linear interpolation
float lerp(float t, float a, float b)
{
    return a + t * (b - a);
}

// Fade function
float fade(float t)
{
    return t * t * t * (t * (t * 6 - 15) + 10);
}

// Gradient function
float grad(int hash, float x, float y)
{
    int h = hash & 7;
    float u = h < 4 ? x : y;
    float v = h < 4 ? y : x;
    return ((h & 1) == 0 ? u : -u) + ((h & 2) == 0 ? v : -v);
}

// Perlin noise function
float perlin(float x, float y)
{
    int X = ((int) floor(x) & 255);
    int Y = ((int) floor(y) & 255);

    x -= floor(x);
    y -= floor(y);

    float u = fade(x);
    float v = fade(y);

    int aa = hash(hash(X) + Y);
    int ab = hash(hash(X) + Y + 1);
    int ba = hash(hash(X + 1) + Y);
    int bb = hash(hash(X + 1) + Y + 1);

    float res = lerp(v, lerp(u, grad(aa, x, y), grad(ba, x - 1, y)),
                        lerp(u, grad(ab, x, y - 1), grad(bb, x - 1, y - 1)));
    return (res + 1.0) / 2.0;
}

// Fractal Perlin noise function
float fractalPerlin(float x, float y)
{
    float total = 0.0;
    float maxAmplitude = 0.0;
    float amplitude = 1.0;
    float frequency = 0.1;

    for (int i = 0; i < octaves; i++)
    {
        total += perlin(x * frequency, y * frequency) * amplitude;
        maxAmplitude += amplitude;
        amplitude *= persistence;
        frequency *= lacunarity;
    }

    return total / maxAmplitude;
}

[numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= WIDTH || id.y >= HEIGHT)
        return;

    float x = (id.x + offsetX) / scale;
    float y = (id.y + offsetY) / scale;

    // Ensure x and y are wrapped correctly to handle negative offsets
    x = fmod(x, 256.0);
    y = fmod(y, 256.0);
    if (x < 0)
        x += 256.0;
    if (y < 0)
        y += 256.0;

    float noiseValue = fractalPerlin(x, y);
    noiseValue = clamp(noiseValue, 0.0, 1.0); // Ensure noiseValue is between 0 and 1
    Result[id.y * WIDTH + id.x] = (int) (noiseValue * maxValue);
}
