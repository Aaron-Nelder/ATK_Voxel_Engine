#pragma kernel CSMain

// the int relating to which face of the voxel is visible, stored in the lowest 6 bits of the int
// top, bottom, left, right, front, back (0,1,2,3,4,5)
// 1 means visible, 0 means not visible   110011
RWStructuredBuffer<int> VisResults;
Buffer<uint> VoxelIds; // the IDs of each voxel in the chunk
int3 ChunkSize; // the size of the chunk in voxels
// 16,16,16


// sets a bit in an int to 1
void SetBit(inout int num, uint pos)
{
    num = num | (1 << pos);
}

// checks if a position is within the bounds of the chunk
bool InBounds(int3 pos)
{
    return pos.x >= 0 && pos.x < ChunkSize.x &&
           pos.y >= 0 && pos.y < ChunkSize.y &&
           pos.z >= 0 && pos.z < ChunkSize.z;
}

// sets the visibility of a face of a voxel
void SetVisibility(inout int visInt, int3 voxelPos, int bitPos)
{
    // if the voxel is in bounds, check if it is air, if it is, set the bit
    if (InBounds(voxelPos))
    {
        int index = voxelPos.x + voxelPos.y * ChunkSize.x + voxelPos.z * ChunkSize.x * ChunkSize.y;
        if (VoxelIds[index] == 0)
        {
            SetBit(visInt, bitPos);
        }
    }
    
    // if the voxel is out of bounds, set the bit
    else
    {
        SetBit(visInt, bitPos);   
    }
}

[numthreads(8, 8, 8)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    // Calculate the index of the voxel
    int3 voxelPos = int3(id.x, id.y, id.z);
    int index = voxelPos.x + voxelPos.y * ChunkSize.x + voxelPos.z * ChunkSize.x * ChunkSize.y;
    
    // Check if the voxel is in bounds
    if (!InBounds(voxelPos))
        return;

    // Get the ID of the voxel
    uint voxelId = VoxelIds[index];
    int visibleSides = 0;
    
    // returns 0 if the voxel is air
    if (voxelId == 0)
    {
        VisResults[index] = visibleSides;
        return;
    }
    
    // Check the visibility of the 6 faces of the voxel
    SetVisibility(visibleSides, voxelPos + int3(0, 1, 0), 0); // Top
    SetVisibility(visibleSides, voxelPos + int3(0, -1, 0), 1); // Bottom
    SetVisibility(visibleSides, voxelPos + int3(-1, 0, 0), 2); // Left
    SetVisibility(visibleSides, voxelPos + int3(1, 0, 0), 3); // Right
    SetVisibility(visibleSides, voxelPos + int3(0, 0, 1), 4); // Front
    SetVisibility(visibleSides, voxelPos + int3(0, 0, -1), 5); // Back

    // Write the result to the output buffer
    VisResults[index] = visibleSides;
}
